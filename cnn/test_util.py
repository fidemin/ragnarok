import numpy as np
import pytest

from cnn.util import img2col, fil2col, col2fil, col2img


@pytest.mark.parametrize(
    "test_input,filter_h,filter_w,stride,padding,expected_shape,expected_col",
    [
        # test case 1: no padding, stride = 2
        (
                np.array([
                    [
                        [
                            [3.0, 4.0, 5.0, 1.0, 2.0],
                            [1.0, 3.0, 1.0, 2.0, 1.0],
                            [0.0, 4.0, 2.0, -1.0, 2.0],
                            [1.0, 3.0, 4.0, 1.0, 2.0],
                            [2.0, 5.0, 1.0, 2.0, 6.0]
                        ],
                        [
                            [1.0, 3.0, 5.0, 1.0, 2.0],
                            [2.0, 3.0, 1.0, 2.0, 1.0],
                            [0.0, 4.0, 2.0, -5.0, 2.0],
                            [1.0, 3.0, 4.0, 1.0, 2.0],
                            [2.0, 5.0, 1.0, 3.0, 6.0]
                        ]
                    ]
                ]), 3, 3, 2, 0,
                (4, 18),
                np.array([
                    [3.0, 4.0, 5.0, 1.0, 3.0, 1.0, 0.0, 4.0, 2.0, 1.0, 3.0, 5.0, 2.0, 3.0, 1.0, 0.0, 4.0, 2.0],
                    [5.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, -1.0, 2.0, 5.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, -5.0, 2.0],
                    [0.0, 4.0, 2.0, 1.0, 3.0, 4.0, 2.0, 5.0, 1.0, 0.0, 4.0, 2.0, 1.0, 3.0, 4.0, 2.0, 5.0, 1.0],
                    [2.0, -1.0, 2.0, 4.0, 1.0, 2.0, 1.0, 2.0, 6.0, 2.0, -5.0, 2.0, 4.0, 1.0, 2.0, 1.0, 3.0, 6.0]
                ])
        ),
        # test case 2: no padding and N = 2
        (
                np.array([
                    [
                        [
                            [1.0, 2.0, 1.0],
                            [-1.0, 3.0, 2.2],
                            [5.0, -4.0, 2.5]
                        ],
                        [
                            [5.0, 4.0, 1.1],
                            [-2.0, 1.0, 2.0],
                            [2.5, 3.0, 3.1]
                        ]
                    ],
                    [
                        [
                            [3.0, 2.0, 3.2],
                            [-1.0, 1.1, 5.0],
                            [4.5, 2.4, 2.1]
                        ],
                        [
                            [3.3, 2.3, -2.2],
                            [3.4, 2.1, -1.1],
                            [2.5, 6.8, 2.1]
                        ]
                    ]
                ]),
                2, 2, 1, 0,
                (8, 8),
                np.array([
                    [1.0, 2.0, -1.0, 3.0, 5.0, 4.0, -2.0, 1.0],
                    [2.0, 1.0, 3.0, 2.2, 4.0, 1.1, 1.0, 2.0],
                    [-1.0, 3.0, 5.0, -4.0, -2.0, 1.0, 2.5, 3.0],
                    [3.0, 2.2, -4.0, 2.5, 1.0, 2.0, 3.0, 3.1],

                    [3.0, 2.0, -1.0, 1.1, 3.3, 2.3, 3.4, 2.1],
                    [2.0, 3.2, 1.1, 5.0, 2.3, -2.2, 2.1, -1.1],
                    [-1.0, 1.1, 4.5, 2.4, 3.4, 2.1, 2.5, 6.8],
                    [1.1, 5.0, 2.4, 2.1, 2.1, -1.1, 6.8, 2.1]
                ])
        ),
        # test case 3: padding = 1
        (
                np.array([
                    [
                        [
                            [1.0, 2.0], [2.1, 3.0]
                        ],
                        [
                            [2.2, 2.1], [2.4, 5.0]
                        ]

                    ],
                    [
                        [
                            [2.1, -1.0], [-5.0, -2.2]
                        ],
                        [
                            [1.1, 2.1], [-1.5, 3.0]
                        ]
                    ]
                ]),
                3, 3, 1, 1,
                (8, 18),
                np.array(
                    [
                        [0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0],
                        [0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0, 0.0],
                        [0.0, 1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0, 0.0, 0.0, 0.0],
                        [1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0, 0.0, 0.0, 0.0, 0.0],

                        [0.0, 0.0, 0.0, 0.0, 2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0],
                        [0.0, 0.0, 0.0, 2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0, 0.0],
                        [0.0, 2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0, 0.0, 0.0, 0.0],
                        [2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0, 0.0, 0.0, 0.0, 0.0]
                    ]
                )
        )
    ],
)
def test_img2col(test_input, filter_h, filter_w, stride, padding, expected_shape, expected_col):
    col = img2col(test_input, filter_h, filter_w, stride=stride, padding=padding)

    assert col.shape == expected_shape
    assert np.allclose(col, expected_col)


@pytest.mark.parametrize(
    "test_input,FH,FW,stride,padding,expected_img",
    [
        # test case 1: no padding, stride = 2
        (
                np.array([
                    [3.0, 4.0, 5.0, 1.0, 3.0, 1.0, 0.0, 4.0, 2.0, 1.0, 3.0, 5.0, 2.0, 3.0, 1.0, 0.0, 4.0, 2.0],
                    [5.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, -1.0, 2.0, 5.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, -5.0, 2.0],
                    [0.0, 4.0, 2.0, 1.0, 3.0, 4.0, 2.0, 5.0, 1.0, 0.0, 4.0, 2.0, 1.0, 3.0, 4.0, 2.0, 5.0, 1.0],
                    [2.0, -1.0, 2.0, 4.0, 1.0, 2.0, 1.0, 2.0, 6.0, 2.0, -5.0, 2.0, 4.0, 1.0, 2.0, 1.0, 3.0, 6.0]
                ]),
                3, 3, 2, 0,
                np.array([
                    [
                        [
                            [3.0, 4.0, 5.0, 1.0, 2.0],
                            [1.0, 3.0, 1.0, 2.0, 1.0],
                            [0.0, 4.0, 2.0, -1.0, 2.0],
                            [1.0, 3.0, 4.0, 1.0, 2.0],
                            [2.0, 5.0, 1.0, 2.0, 6.0]
                        ],
                        [
                            [1.0, 3.0, 5.0, 1.0, 2.0],
                            [2.0, 3.0, 1.0, 2.0, 1.0],
                            [0.0, 4.0, 2.0, -5.0, 2.0],
                            [1.0, 3.0, 4.0, 1.0, 2.0],
                            [2.0, 5.0, 1.0, 3.0, 6.0]
                        ]
                    ]
                ])
        ),
        # test case 2: no padding and N = 2
        (
                np.array([
                    [1.0, 2.0, -1.0, 3.0, 5.0, 4.0, -2.0, 1.0],
                    [2.0, 1.0, 3.0, 2.2, 4.0, 1.1, 1.0, 2.0],
                    [-1.0, 3.0, 5.0, -4.0, -2.0, 1.0, 2.5, 3.0],
                    [3.0, 2.2, -4.0, 2.5, 1.0, 2.0, 3.0, 3.1],

                    [3.0, 2.0, -1.0, 1.1, 3.3, 2.3, 3.4, 2.1],
                    [2.0, 3.2, 1.1, 5.0, 2.3, -2.2, 2.1, -1.1],
                    [-1.0, 1.1, 4.5, 2.4, 3.4, 2.1, 2.5, 6.8],
                    [1.1, 5.0, 2.4, 2.1, 2.1, -1.1, 6.8, 2.1]
                ])
                ,
                2, 2, 1, 0,
                np.array([
                    [
                        [
                            [1.0, 2.0, 1.0],
                            [-1.0, 3.0, 2.2],
                            [5.0, -4.0, 2.5]
                        ],
                        [
                            [5.0, 4.0, 1.1],
                            [-2.0, 1.0, 2.0],
                            [2.5, 3.0, 3.1]
                        ]
                    ],
                    [
                        [
                            [3.0, 2.0, 3.2],
                            [-1.0, 1.1, 5.0],
                            [4.5, 2.4, 2.1]
                        ],
                        [
                            [3.3, 2.3, -2.2],
                            [3.4, 2.1, -1.1],
                            [2.5, 6.8, 2.1]
                        ]
                    ]
                ])

        ),
        # test case 3: padding = 1
        (
                np.array(
                    [
                        [0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0],
                        [0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0, 0.0],
                        [0.0, 1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0, 0.0, 0.0, 0.0],
                        [1.0, 2.0, 0.0, 2.1, 3.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.1, 0.0, 2.4, 5.0, 0.0, 0.0, 0.0, 0.0],

                        [0.0, 0.0, 0.0, 0.0, 2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0],
                        [0.0, 0.0, 0.0, 2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0, 0.0],
                        [0.0, 2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0, 0.0, 0.0, 0.0],
                        [2.1, -1.0, 0.0, -5.0, -2.2, 0.0, 0.0, 0.0, 0.0, 1.1, 2.1, 0.0, -1.5, 3.0, 0.0, 0.0, 0.0, 0.0]
                    ]
                ),
                3, 3, 1, 1,
                np.array([
                    [
                        [
                            [1.0, 2.0], [2.1, 3.0]
                        ],
                        [
                            [2.2, 2.1], [2.4, 5.0]
                        ]

                    ],
                    [
                        [
                            [2.1, -1.0], [-5.0, -2.2]
                        ],
                        [
                            [1.1, 2.1], [-1.5, 3.0]
                        ]
                    ]
                ])

        )
    ],
)
def test_col2img(test_input, FH, FW, stride, padding, expected_img):
    N, C, H, W = expected_img.shape

    actual = col2img(test_input, N, C, H, W, FH, FW, padding=padding, stride=stride)
    assert actual.shape == expected_img.shape
    assert np.allclose(actual, expected_img)


def test_fil2col():
    test_input = np.array([
        [
            [[1.0, 2.0, 1.0]], [[2.0, 1.1, -1.0]]
        ],
        [
            [[3.0, 1.0, 2.0]], [[4.0, -1.1, 2.0]]
        ],
    ])

    expected = np.array([
        [1.0, 2.0, 1.0, 2.0, 1.1, -1.0],
        [3.0, 1.0, 2.0, 4.0, -1.1, 2.0]
    ])

    actual = fil2col(test_input)

    assert np.allclose(actual, expected)


def test_col2fil():
    test_input = np.array([
        [1.0, 2.0, 1.0, 2.0, 1.1, -1.0],
        [3.0, 1.0, 2.0, 4.0, -1.1, 2.0]
    ])

    FC = 2
    FH = 1
    FW = 3

    expected = np.array([
        [
            [[1.0, 2.0, 1.0]], [[2.0, 1.1, -1.0]]
        ],
        [
            [[3.0, 1.0, 2.0]], [[4.0, -1.1, 2.0]]
        ],
    ])

    actual = col2fil(test_input, FC, FH, FW)

    assert np.allclose(actual, expected)
